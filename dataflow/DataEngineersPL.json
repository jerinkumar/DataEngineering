{
	"name": "DataEngineersPL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "DataEngineers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "flatten1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "UpdateSkills"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          address as (city as string, zip as string),",
				"          skills as string[],",
				"          salary as integer,",
				"          active as boolean",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> DataEngineers",
				"DataEngineers foldDown(unroll(skills),",
				"     mapColumn(",
				"          id,",
				"          name,",
				"          address,",
				"          skills,",
				"          salary,",
				"          active",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 filter((active == true() && skills == 'ADF')) ~> filter1",
				"flatten1 sort(desc(salary, true),",
				"     asc(name, true)) ~> sort1",
				"sort1 alterRow(updateIf(active == true() && skills == 'ADF')) ~> alterRow1",
				"alterRow1 derive(skills = iif(skills == 'ADF', 'Azure Data Factory', skills)) ~> UpdateSkills",
				"UpdateSkills sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['DataEngineersOutput.json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}